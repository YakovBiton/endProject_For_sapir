## Face Features Calculation Using Dlib 68 Points Landmarks

This document describes the functions and features used to calculate facial landmarks and derive various geometric and color characteristics of a face. These calculations are critical for various facial recognition tasks and the end goal is to determine from face image of a child if the child belong to 2 parents (we also have the faces images of the parents).

### Functions

1. **get_midpoint(point1, point2)**: Calculates the midpoint between two given points.
2. **angle_between_lines(line1_start, line1_end, line2_start, line2_end)**: Computes the angle in degrees between two lines.
3. **angle_between_points(a, b, c)**: Finds the angle between three points.
4. **euclidean_distance(a, b)**: Computes the Euclidean distance between two points.

### how the landmarks are extracted
landmarks_coordinates = feature.landmarks

### Ratio-based Features

all the ratio based features are build from 2 calculated features
the calculated features :
- face_width = euclidean_distance(landmarks_coordinates[0][0], landmarks_coordinates[0][16])
- nose_length = euclidean_distance(landmarks_coordinates[0][27] , landmarks_coordinates[0][30])
- nose_width = euclidean_distance(landmarks_coordinates[0][31], landmarks_coordinates[0][35])
- face_height = euclidean_distance(landmarks_coordinates[0][27], landmarks_coordinates[0][8])
- mouth_width = euclidean_distance(landmarks_coordinates[0][48], landmarks_coordinates[0][54])
- nose_width_short = euclidean_distance(landmarks_coordinates[0][31], landmarks_coordinates[0][35])
- interocular_distance = euclidean_distance(get_midpoint(landmarks_coordinates[0][39], landmarks_coordinates[0][40]), get_midpoint(landmarks_coordinates[0][42], landmarks_coordinates[0][47]))
- face_length = euclidean_distance(landmarks_coordinates[0][27], landmarks_coordinates[0][8])
- left_eye_width = euclidean_distance(landmarks_coordinates[0][36], landmarks_coordinates[0][39])
- right_eye_width = euclidean_distance(landmarks_coordinates[0][42], landmarks_coordinates[0][45])

the ratio features :
- nose_ratio = nose_length / nose_width
- nose_face_width_ratio = nose_width / face_width
- face_ratio = face_width / face_height
- mouth_middle_ratio = left_to_mouth / right_to_mouth
- mouth_nose_ratio = mouth_width / nose_width_short
- interocular_face_width_ratio = interocular_distance / face_width
- nose_face_length_ratio = nose_length / face_length
- left_eye_face_width_ratio = left_eye_width / face_width
- right_eye_face_width_ratio = right_eye_width / face_width

### Angle-based Features

the calculated features :
- nose_line_start = landmarks_coordinates[0][27]
- nose_line_end = landmarks_coordinates[0][30]
- mouth_line_start = get_midpoint(landmarks_coordinates[0][3], landmarks_coordinates[0][4])
- mouth_line_end = landmarks_coordinates[0][48]

the angle features :
- angle_between_nose_mouth = angle_between_lines(nose_line_start, nose_line_end, mouth_line_start, mouth_line_end)
- angle_nose_inner_eye_corners = angle_between_points(landmarks_coordinates[0][39], landmarks_coordinates[0][30], landmarks_coordinates[0][42])
- angle_right_eye_right_corner = angle_between_points(landmarks_coordinates[0][37], landmarks_coordinates[0][36], landmarks_coordinates[0][41])
- angle_left_eye_right_corner = angle_between_points(landmarks_coordinates[0][43], landmarks_coordinates[0][42], landmarks_coordinates[0][47])
- chin_angle = angle_between_points(landmarks_coordinates[0][8], landmarks_coordinates[0][7], landmarks_coordinates[0][9])

### Color Features

- **Skin Color (Red, Green, Blue)**: RGB values representing the skin color.

### Usage and Purpose

The primary purpose of these facial features calculations is to assist in determining biological relationships between individuals, specifically identifying the biological child of two parents based on their facial images. By calculating various geometric ratios and angles, the system can compare facial characteristics and potentially identify family resemblances. These calculations are integral to the task of recognizing biological connections between family members and can be extended for other facial analysis tasks.


